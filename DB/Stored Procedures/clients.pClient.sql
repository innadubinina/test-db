SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE procedure [clients].[pClient]
      @action              int = 8           --  action mask: 0x08 = SELECT (by default), 0x04 = EDIT, 0x02 = DELETE, 0x01 = INSERT
    , @ID                  int = null  out
    , @rowcount            int = null  out

    , @UID    uniqueidentifier = null  
    , @email     nvarchar(128) = null
    , @firstName nvarchar(100) = null
    , @lastName  nvarchar(100) = null
    , @isValidEmail        bit = null        -- for select action only
    , @optIn               bit = null
    , @createDate     datetime = null        -- for select action only

    , @ipAddress  varchar(330) = null
    , @languageISO2    char(2) = null

as
--  ==================================================================
--  create: 20120725 Tatiana Didenko
--  modify: 20120801 Tatiana Didenko 1) delete parameters: '@userNameLC', '@domain'.
--                                   2) added using clients.fCheckEmailValidity function for set @isValidEmail
--          20130129 Mykhaylo Tytarenko. New fields ipAddress and languageISO2 in the base entity
--  description: provide basic SELECT, EDIT, DELETE and INSERT operations for '[clients].[client]' table
--  ==================================================================
BEGIN
set nocount on;

----  routine logging and error trapping variables  ------------------
declare @errMsg varchar(max), @errNum int;

declare @trancount int;     set @trancount = @@trancount    --  outlevel trancount    
declare @intResult int;     set @intResult = -1;            --  routine fail status;
------------------------------------------------------------------  //

begin try

    if (@trancount > 0) SAVE TRANSACTION Clients_pClient
    else BEGIN TRAN

    -- <delete operation>  -------------------------------------------
    if @action & 0x02 != 0
    begin

        -- <base table delete> -----------------------------
        delete [clients].[client] where id = @ID
        set @rowcount = @@rowcount;
        if @rowcount = 0
        begin
            set @errMsg = 'non-existent row delete operation found.' 
                +  char(0x0d) + char(0x0a) + char(0x09) + '@ID=' + isnull(ltrim(rtrim(cast(@ID as varchar(48)))), 'null')
            raiserror (@errMsg , 16, 1)
        end
        ------------------------------- </base table delete>

    end
    ---------------------------------------------- </delete operation>

    -- <insert operation>  -------------------------------------------
    if @action & 0x01 != 0
    begin
        set @isValidEmail = (select clients.fCheckEmailValidity(@email))

        -- <base table insert> -----------------------------
        if @UID is not null
        begin
            insert [clients].[client] ([UID],[email],[firstName],[lastName],[isValidEmail],[optIn], [ipAddress], [languageISO2])
            values (@UID, @email, @firstName, @lastName, @isValidEmail, @optIn, @ipAddress, @languageISO2)
        end
        else
        begin
            -- UID is generated by default
            insert [clients].[client] ([email],[firstName],[lastName],[isValidEmail],[optIn], [ipAddress], [languageISO2])
            values (@email, @firstName, @lastName, @isValidEmail, @optIn, @ipAddress, @languageISO2)
        end 
        
            set @rowcount = @@rowcount;
            select @ID = scope_identity();
        ------------------------------- </base table insert>

    
    end
    ---------------------------------------------- </insert operation>


    -- <update operation>  -------------------------------------------
    if @action & 0x04 != 0
    begin
        
        set @isValidEmail = (select clients.fCheckEmailValidity(@email))

        -- <base table update> -----------------------------
        update [clients].[client]
        set [email] = @email, [firstName] = @firstName, [lastName] = @lastName
            , [isValidEmail] = @isValidEmail, [optIn] = @optIn, [ipAddress] = @ipAddress, [languageISO2] = @languageISO2
        where id = @ID

        set @rowcount = @@rowcount;
        if @rowcount = 0
        begin
            set @errMsg = 'non-existent row update operation found.' 
                +  char(0x0d) + char(0x0a) + char(0x09) + '@ID=' + isnull(ltrim(rtrim(cast(@ID as varchar(48)))), 'null')
            raiserror (@errMsg , 16, 1)
        end
        ------------------------------- </base table update>

    end
    ---------------------------------------------- </update operation> 



    -- <select operation>  -------------------------------------------
    ------------------------------------------------------------------
    if @action & 0x08 != 0
    begin
        declare @sqlText nvarchar(max), @sqlParmDefinition nvarchar(max), @sqlFilter nvarchar(max);
       -- declare @intTotalRecords int;
        
        set @sqlFilter = N'' +
            case when @id           is null then '' else 'and ([id] = @id)'                     + char (0x0d) end +
            case when @UID          is null then '' else 'and ([UID] = @UID)'                   + char (0x0d) end +
            case when @email        is null then '' else 'and ([email] = @email)'               + char (0x0d) end +
            case when @firstName    is null then '' else 'and ([firstName] = @firstName)'       + char (0x0d) end +
            case when @lastName     is null then '' else 'and ([lastName] = @lastName)'         + char (0x0d) end +
            case when @isValidEmail is null then '' else 'and ([isValidEmail] = @isValidEmail)' + char (0x0d) end +
            case when @optIn        is null then '' else 'and ([optIn] = @optIn)'               + char (0x0d) end +
            case when @createDate   is null then '' else 'and ([createDate] = @createDate)'     + char (0x0d) end +
            case when @ipAddress    is null then '' else 'and ([ipAddress] = @ipAddress)'       + char (0x0d) end +
            case when @languageISO2 is null then '' else 'and ([languageISO2] = @languageISO2)' + char (0x0d) end;

        if left(@sqlFilter, 3) = N'and'
            set @sqlFilter = right (@sqlFilter, len (@sqlFilter)-3)
        -- print @sqlFilter;

        set @sqlText = N'
            select ' + case when @rowcount is not null then 'top (' + ltrim(rtrim(cast(@rowcount as varchar(48)))) + ')' else '' end + '
                  [id]           as [Client.ID]
                , [UID]          as [Client.UID]
                , [email]        as [Client.Email]
                , [firstName]    as [Client.FirstName]
                , [lastName]     as [Client.LastName]
                , [isValidEmail] as [Client.IsValidEmail]
                , [optIn]        as [Client.OptIn]
                , [createDate]   as [Client.CreateDate]
                , [ipAddress]    as [Client.IPAddress]
                , [languageISO2] as [Client.LanguageISO2]

            from [clients].[client]'
            + case
                when @sqlFilter = N'' then ''
                else '
            where ' + char (0x0d) + @sqlFilter
                end               
            + ' 
            order by id desc' 
            + ' 
                        
            set @rowcount = @@rowcount;
            ';
        print @sqlText;

        set @sqlParmDefinition = N'
              @id                  int
            , @rowcount            int  out

            , @UID    uniqueidentifier
            , @email     nvarchar(128)
            , @firstName nvarchar(100)
            , @lastName  nvarchar(100)
            , @isValidEmail        bit
            , @optIn               bit
            , @createDate     datetime

            , @ipAddress  varchar(330)
            , @languageISO2    char(2)
            
            ';
        -- print @sqlParmDefinition;        

        --  output recordset
        exec @intResult = sp_executesql @sqlText, @sqlParmDefinition
            , @id = @id
            , @UID = @UID, @email = @email, @firstName = @firstName, @lastName = @lastName, @isValidEmail = @isValidEmail
            , @optIn = @optIn, @createDate = @createDate, @ipAddress = @ipAddress, @languageISO2 = @languageISO2
            , @rowcount = @rowcount out

    end
    ------------------------------------------------------------------
    ---------------------------------------------- </select operation> 


    if @trancount = 0 COMMIT TRANSACTION
    set @intResult = 0  --  routine success status

end try

begin catch

    if @trancount = 0 ROLLBACK TRANSACTION
    else if xact_state() <> -1 ROLLBACK TRANSACTION Clients_pClient

    set @ID = null;

    select @errNum = error_number(), @errMsg = error_message();
    if xact_state() <> -1 exec [log].[pError] @number = @errNum, @message = @errMsg, @spid = @@spid
    print @errMsg;
    print @sqlText

    -- output error result
    set @intResult = case 
        when @errNum > 0 then (-1)*@errNum
        when @errNum = 0 then -1
        else @errNum
        end

end catch;

/*  TEST ZONE
--  select * from [clients].[client]; 
--  select top 10 * from log.error


--  SELECT
    exec [clients].[pClient] @id=4
    exec [clients].[pClient] @rowcount = 10


--  INSERT
declare @intResult int, @intRowCount int, @id int;
    
    set xact_abort on
    begin tran
    exec @intResult = [clients].[pClient] @action = 1, @UID = 'DBC21343-EE89-400B-9226-F20A4AE9AA86', @email = 'test@y', @firstName = 'TEST1', @lastName = 'TEST2'
        , @isValidEmail = 1, @optIn = 1
        , @rowCount = @intRowCount out, @id = @id out
    select @intResult as intResult, @intRowCount as [rowCount], @id as id
    exec [clients].[pClient]
    rollback

--  UPDATE
    declare @intResult int, @intRowCount int, @id int;
    
    set xact_abort on
    begin tran
    exec @intResult = [clients].[pClient] @action = 4, @id = 9, @UID = 'DBC21343-EE89-400B-9226-F20A4AE9AA86', @email = 'test222@ya.ru', @firstName = 'TESTFirst', @lastName = 'TESTLast'
        , @isValidEmail = 1, @optIn = 0
        , @rowCount = @intRowCount out 
    select @intResult as intResult, @intRowCount as [rowCount], @id as id
    exec [clients].[pClient]
    rollback


--  DELETE
    declare @intResult int, @intRowCount int, @id int;
    -- set xact_abort on
    begin tran
    exec @intResult = [clients].[pClient] @action = 2, @id = 9
        , @rowCount = @intRowCount out
    select @intResult as intResult, @intRowCount as [rowCount], @id as id
    exec [clients].[pClient]
    rollback

*/

return @intResult;
END
GO
