SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
create procedure [activationService].[pLicense_Activate_OLD20120910]
    --  main license to activate
      @licenseKey      varchar(64)
    
    --  client system attributes
    , @machineKey uniqueidentifier 
    , @motherboardKey varchar(128)
    , @physicalMAC    varchar(128)
    , @isAutogeneratedMachineKey bit
    
    --  previous license (old license key if need)
    , @oldLicenseKey   varchar(64) = null
    
    , @endDate            datetime = null OUT
    , @serverActivationCount   int = null OUT
as
--  ==================================================================
--  Create: 20120724,25 Mykhaylo Tytarenko 
--  Modify: 20120801 Tatiana Didenko. 1) Updated endDate for the chain of old activation licenses.
--                                    2) Added the @isAutogeneratedMachineKey parameter
--  Description: 'licenses.license', 'licenses.activation'
--  ==================================================================
BEGIN
set nocount on;

----  routine logging and error trapping variables  ------------------
declare @errMsg varchar(max), @errNum int;

declare @trancount int;     set @trancount = @@trancount    --  outlevel trancount    
declare @intResult int;     set @intResult = -1;            --  routine fail status;
------------------------------------------------------------------  // 
declare @licenseID    int; set @licenseID    = (select ID from licenses.license where [key] = @licenseKey);
declare @oldLicenseID int; set @oldLicenseID = (select ID from licenses.license where [key] = @oldLicenseKey);


declare @dtLicenseEndDate datetime;
declare @dtNow datetime; set @dtNow = (select getdate());

declare @activationID int, @systemID int; 
declare @oldActivationID int; 

--  license attributes 
declare @allowedActivationCount int, @readyForActivation bit, @deactivated bit;
declare @activationCount int;

begin try

    if @licenseID is null
    begin
        set @errMsg = N'50001. Given license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> is not exists in the license pool'
        raiserror (@errMsg , 16, 1)
    end    

    if @oldLicenseID is null and @oldLicenseKey is not null
    begin
        set @errMsg = N'50002. Given old license <' + ltrim(rtrim(ISNULL(@oldLicenseKey, 'null'))) + '> is not exists in the license pool'
        raiserror (@errMsg , 16, 1)
    end   

    --  get exists activation for this client
    set @systemID = (select ID from clients.system where machineKey = @machineKey and isnull(motherboardKey, '') = isnull (@motherboardKey, '') and isnull(physicalMAC, '') = isnull(@physicalMAC, ''));
    set @activationID = (select ID from licenses.activation where licenseID = @licenseID and systemID = @systemID);

    if @oldLicenseID is not null
    begin
        set @oldActivationID = (select ID from licenses.activation where licenseID = @oldLicenseID and systemID = @systemID);
    end

    --  cheat :)
    if @oldLicenseID is not null and @licenseID is not null
        and @oldActivationID is not null and @activationID is not null
    begin
        set @errMsg = N'50007. The licenses, <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> and <'  + ltrim(rtrim(ISNULL(@oldLicenseKey, 'null'))) + '> are already activated on this system (already merged)'
        raiserror (@errMsg , 16, 1)       
    end
    

    if @activationID is null
    begin

        --  system entity
        if @systemID is null
            exec @intResult = clients.pSystem @action = 1, @machineKey = @machineKey, @motherboardKey = @motherboardKey, @physicalMAC = @physicalMAC, @isAutogeneratedMachineKey = @isAutogeneratedMachineKey
                , @ID = @systemID OUT
        
        set @activationCount = (select COUNT(*) from licenses.activation where licenseID = @licenseID);
        
        --  license entity
        select @allowedActivationCount = allowedActivationCount
            , @readyForActivation      = [readyForActivation] 
            , @deactivated             = [deactivated]
            , @serverActivationCount   = [serverActivationCount]
        from licenses.vLicense
        where ID = @licenseID

        if @activationCount >= @allowedActivationCount
        begin
            set @errMsg = N'50003. The number of available activations for this license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> is exceeded'
            raiserror (@errMsg , 16, 1)
        end

        if @readyForActivation != 1
        begin
            set @errMsg = N'50004. Given license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> is not ready for activation'
            raiserror (@errMsg , 16, 1)
        end

        if @deactivated = 1
        begin
            set @errMsg = N'50005. Given license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> was deactivated'
            raiserror (@errMsg , 16, 1)
        end


        --  --------------------------------------------------------------
        --  MERGE
        --  --------------------------------------------------------------
        if @oldLicenseID is not null
        begin
            --  precondidtions to merge
            --  1. old key is active
            if  not exists (select * from licenses.license where ID = @oldLicenseID and deactivated != 1)
                or
            --  2. new key is valid (is active and allowed activation count > 0)
                not exists (
                    select * from licenses.vLicense where ID = @licenseID and deactivated != 1
                        and allowedActivationCount> (select COUNT(*) from licenses.activation where LicenseID = @licenseID)
                    )
                --  or
            --  3. new key not linked to this client already
                --  alredy checked
                --  exists (select * from ActivationProcess.Activations where LicenseNumberID = @licenseNumberID and ClientId = @clientId)
            goto lblExit;

            --  key merging
            set @dtLicenseEndDate = (select endDate from licenses.activation where id = @oldActivationID);
            --  select @dtLicenseEndDate as dtLicenseEndDate;

            if @dtLicenseEndDate is null
                set @dtLicenseEndDate = (
                select dateadd(dd, (select [lifetimeDays] from licenses.vLicense where ID = @oldlicenseID), createDate)
                from licenses.activation
                where ID = @oldActivationID
                )                
            --  select @dtLicenseEndDate as dtLicenseEndDate;
                
            if (@dtLicenseEndDate < @dtNow) or (@dtLicenseEndDate is null)
                set @dtLicenseEndDate = @dtNow
            --  select @dtLicenseEndDate as dtLicenseEndDate;
            
            set @dtLicenseEndDate = dateadd(dd, (select [lifetimeDays] from licenses.vLicense where ID = @licenseID), @dtLicenseEndDate)
            --  select @dtLicenseEndDate as dtLicenseEndDate;

            if (@@trancount = 0) BEGIN TRAN trnASSetActivationStatus

            --  insert activation record for new key                
            insert licenses.activation (licenseID, parentID, systemID, createDate, endDate)
            select @licenseID, @oldActivationID, @systemID, GETDATE(), @dtLicenseEndDate
            --  // key merging
            set @activationID = SCOPE_IDENTITY();

            --  update activation record for ald key: set new EndDate for old activation
            -- if Lifetime is null, then update activation records for the chain of old keys: set new EndDate for for the chain of old activations
            if @dtLicenseEndDate is not null
            begin
				update licenses.activation
				set endDate = @dtLicenseEndDate
				where ID in (select ID from [licenses].[fActivationTie] (@activationID) where ID!=@activationID)
            end
            
        end
        --  --------------------------------------------------------------
        --  /MERGE
        --  --------------------------------------------------------------
        else    --  if @oldLicenseNumberID is null
        --  --------------------------------------------------------------
        --  ONE KEY
        --  --------------------------------------------------------------
        begin
            ----  get exists activation for this client
            ----set @activationID = (select ID from ActivationProcess.Activations where LicenseNumberID = @licenseNumberID and ClientId = @clientId);
            --if @activationID is null
            --begin
            set @dtLicenseEndDate = @dtNow;   
            set @dtLicenseEndDate = dateadd(dd, (select [lifetimeDays] from  licenses.vLicense where ID = @licenseID), @dtLicenseEndDate)

            if (@@trancount = 0) BEGIN TRAN trnASSetActivationStatus
                
            insert licenses.activation (licenseID, parentID, systemID, createDate, endDate)
            select @licenseID, @oldActivationID, @systemID, GETDATE(), @dtLicenseEndDate
            set @activationID = SCOPE_IDENTITY();
            --end
        end

    end --  of <if @activationID is null> clause
    else    
    --  if @activationID is not null - license for this system already exists
    begin
        set @dtLicenseEndDate = (select endDate from licenses.activation where ID = @activationID);
        if @dtLicenseEndDate < @dtNow
        begin
            set @errMsg = N'50006. The license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> has expired'
            raiserror (@errMsg , 16, 1)       
        end
    end
    
    
    if @dtLicenseEndDate is null
        set @dtLicenseEndDate = (select EndDate from licenses.activation where ID = @activationID);
    if @dtLicenseEndDate is null
        set @dtLicenseEndDate = (
            select dateadd(dd, lc.lifetimeDays, act.createDate) as LicenseEndDate
            from licenses.activation act
                join licenses.vLicense lc on act.licenseID = lc.id
            where act.ID = @activationID
            );
   
    --  set @daysToLicenseEndDate = datediff(dd, @dtToday, @dtLicenseEndDate);
    set @endDate = @dtLicenseEndDate;


    ----  update activation count
    if (@@trancount = 0) BEGIN TRAN trnASSetActivationStatus;
    
    update licenses.activation
    set
          count = count + 1
        , modifyDate = GETDATE()
    where ID = @activationID
    

lblExit:
	
	
    if @trancount = 0 and @@trancount > 0 COMMIT TRANSACTION
    set @intResult = 0  --  routine success status

end try

begin catch

    if @trancount = 0 and @@trancount > 0 ROLLBACK TRANSACTION trnASSetActivationStatus
    select @errNum = error_number(), @errMsg = error_message();

    print @errMsg;
    exec [Log].[pError] @action = 1, @number = @errNum, @message = @errMsg
    set @intResult = case 
        when @errNum > 0 and isnumeric(left(@errMsg, 5)) = 1 then (-1)* cast(left(@errMsg, 5) as int)
        when @errNum = 0 then -1 
        else (-1)*@errNum 
        end

end catch;

      
                   
/*  TEST ZONE
--  select top 10 * from licenses.license where id = 650020;
--  select top 10 * from licenses.activation where endDate < getdate();
  
begin tran

--  declare @intResult int, @daysToLicenseEndDate int;
--  select newid()

declare @intResult int, @licenseEndDate datetime, @serverActivationCount int;
exec @intResult = [activationService].[pLicense_Activate]
    --  main license to activate
      @licenseKey = 'RN2S4TAS6DSMQGZ2R4M6PRN4K'
    
    --  client system attributes
    , @machineKey = '10CF59E1-853D-46E6-825C-77337014AA3E'
    , @motherboardKey = 'IST19'
    , @physicalMAC    = null
    , @isAutogeneratedMachineKey = 1
    , @oldLicenseKey = 'BXX9Q7AMB6ZY3DA9H2MT8HFUM'
    
    , @endDate = @licenseEndDate OUT
    , @serverActivationCount = @serverActivationCount OUT
  
select @intResult, @licenseEndDate as licenseEndDate, @serverActivationCount as serverActivationCount;

--  select * from licenses.activation where licenseID = 100144
--  select * from licenses.activation where licenseID = 100143
    select * from licenses.activation 

rollback tran



--  20120726 BUGFIX
begin tran

declare @intResult int, @licenseEndDate datetime;
exec @intResult = [activationService].[pLicense_Activate]
    --  main license to activate
      @licenseKey = 'JPY89W22T3A4Q2HMJ4RFUWYJ6'
    
    --  client system attributes
    , @machineKey = '56FBA942-04CB-4FFA-895F-17A984D453EF'
    , @motherboardKey = 'IST19'
    , @physicalMAC    = null
    
    , @endDate = @licenseEndDate OUT
  
select @intResult, @licenseEndDate as licenseEndDate;

--  select * from licenses.activation where licenseID = 100144
--  select * from licenses.activation where licenseID = 100143

--  select * from licenses.vLicense where [key] = 'JPY89W22T3A4Q2HMJ4RFUWYJ6'
--  select * from licenses.activation where licenseID = 20009

rollback tran


*/
--http://www.devtoolshed.com/using-stored-procedures-entity-framework-scalar-return-values
-- я не рак, Entity Framework не даёт возможности получить значение с return;
select @intResult;
--

return @intResult;
END
GO
