SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE procedure [activationService].[pLicense_Activate]
	  @sessionUID   uniqueidentifier 
 
    --  main license to activate
    , @licenseKey      varchar(64)
    
    --  client system attributes
    , @machineKey uniqueidentifier 
    , @motherboardKey varchar(128)
    , @physicalMAC    varchar(128)
    , @isAutogeneratedMachineKey bit
    
    --  previous license (old license key if need)
    , @oldLicenseKey   varchar(64) = null
    
    , @endDate            datetime = null OUT
    , @serverActivationCount   int = null OUT
as
--  ==================================================================
--  Create: 20120724,25 Mykhaylo Tytarenko 
--  Modify: 20120801 Tatiana Didenko. 1) Updated endDate for the chain of old activation licenses.
--                                    2) Added the @isAutogeneratedMachineKey parameter
--  Modify: 20120917 Tatiana Didenko. The procedure is rewrited by use the function clients.fGetSystemID
--  Modify: 20130313 Mykhaylo Tytarenko. Validate the string client system attributes with empty string to NULL
--  Description: 'licenses.license', 'licenses.activation'
--  ==================================================================
BEGIN
set nocount on;

----  routine logging and error trapping variables  ------------------
declare @errMsg varchar(max), @errNum int;

declare @trancount int;     set @trancount = @@trancount    --  outlevel trancount    
declare @intResult int;     set @intResult = -1;            --  routine fail status;
------------------------------------------------------------------  // 
declare @licenseID    int; set @licenseID    = (select ID from licenses.license where [key] = @licenseKey);
declare @oldLicenseID int; set @oldLicenseID = (select ID from licenses.license where [key] = @oldLicenseKey);


declare @dtLicenseEndDate datetime;
declare @dtNow datetime; set @dtNow = (select getdate());

declare @activationID int, @systemID int; 
declare @oldActivationID int; 

--  license attributes 
declare @allowedActivationCount int, @readyForActivation bit, @deactivated bit;
declare @activationCount int;

--  activation history attributes
declare @createDate datetime;
declare @ipAddress varchar(64);
declare @history xml;

begin try

    if @licenseID is null
    begin
        set @errMsg = N'50001. Given license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> is not exists in the license pool'
        raiserror (@errMsg , 16, 1)
    end    

    if @oldLicenseID is null and @oldLicenseKey is not null
    begin
        set @errMsg = N'50002. Given old license <' + ltrim(rtrim(ISNULL(@oldLicenseKey, 'null'))) + '> is not exists in the license pool'
        raiserror (@errMsg , 16, 1)
    end   

    --  ------------------
    --  License check zone
    --  ------------------
    set @activationCount = (select COUNT(*) from licenses.activation where licenseID = @licenseID);

    --  license entity
    select @allowedActivationCount = allowedActivationCount
        , @readyForActivation      = [readyForActivation] 
        , @deactivated             = [deactivated]
        , @serverActivationCount   = [serverActivationCount]
    from licenses.vLicense
    where ID = @licenseID


    if @readyForActivation != 1
    begin
        set @errMsg = N'50004. Given license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> is not ready for activation'
        raiserror (@errMsg , 16, 1)
    end

    if @deactivated = 1
    begin
        set @errMsg = N'50005. Given license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> was deactivated'
        raiserror (@errMsg , 16, 1)
    end
    --  --------------------
    --  / License check zone
    --  --------------------

    --  history attribute
    set @ipAddress = (select top 1 IPAddress from clients.[session] where [UID] = @sessionUID);

    --  get exists activation for this client

    --  20130313: validate sting params passed from C++ code in case with empty string
    set @physicalMAC    = nullif (@physicalMAC, '');
    set @motherboardKey = nullif (@motherboardKey, '');
    --  // 20130313: validate sting params passed from C++ code in case with empty string

    set @systemID = (select clients.fGetSystemID(@physicalMAC, @machineKey, @motherboardKey))
    set @activationID = (select ID from licenses.activation where licenseID = @licenseID and systemID = @systemID);

    if @oldLicenseID is not null
    begin
        set @oldActivationID = (select ID from licenses.activation where licenseID = @oldLicenseID and systemID = @systemID);
    end

    --  cheat :)
    if @oldLicenseID is not null and @licenseID is not null
        and @oldActivationID is not null and @activationID is not null
    begin
        set @errMsg = N'50007. The licenses, <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> and <'  + ltrim(rtrim(ISNULL(@oldLicenseKey, 'null'))) + '> are already activated on this system (already merged)'
        raiserror (@errMsg , 16, 1)       
    end
    

    if @activationID is null
    begin

        --  system entity
        if @systemID is null
            exec @intResult = clients.pSystem @action = 1, @machineKey = @machineKey, @motherboardKey = @motherboardKey, @physicalMAC = @physicalMAC, @isAutogeneratedMachineKey = @isAutogeneratedMachineKey
                , @ID = @systemID OUT
        

        if @activationCount >= @allowedActivationCount
        begin
            set @errMsg = N'50003. The number of available activations for this license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> is exceeded.' + CHAR(0x0d)
                + 'Current client system params: '
                + CHAR(0x0d) + CHAR(0x09) + 'machineKey=' + isnull(ltrim(rtrim(cast(@machineKey as varchar(48)))), 'null')
                + CHAR(0x0d) + CHAR(0x09) + 'motherboardKey=' + isnull(ltrim(rtrim(cast(@motherboardKey as varchar(48)))), 'null')
                + CHAR(0x0d) + CHAR(0x09) + 'physicalMAC=' + isnull(ltrim(rtrim(cast(@physicalMAC as varchar(48)))), 'null')
                + CHAR(0x0d) + CHAR(0x09) + 'isAutogeneratedMachineKey=' + isnull(ltrim(rtrim(cast(@isAutogeneratedMachineKey as varchar(48)))), 'null')
                
            raiserror (@errMsg , 16, 1)
        end


        --  --------------------------------------------------------------
        --  MERGE
        --  --------------------------------------------------------------
        if @oldLicenseID is not null
        begin
            --  precondidtions to merge
            --  1. old key is active
            if  not exists (select * from licenses.license where ID = @oldLicenseID and deactivated != 1)
                or
            --  2. new key is valid (is active and allowed activation count > 0)
                not exists (
                    select * from licenses.vLicense where ID = @licenseID and deactivated != 1
                        and allowedActivationCount> (select COUNT(*) from licenses.activation where LicenseID = @licenseID)
                    )
                --  or
            --  3. new key not linked to this client already
                --  alredy checked
                --  exists (select * from ActivationProcess.Activations where LicenseNumberID = @licenseNumberID and ClientId = @clientId)
            goto lblExit;

            --  key merging
            set @dtLicenseEndDate = (select endDate from licenses.activation where id = @oldActivationID);
            --  select @dtLicenseEndDate as dtLicenseEndDate;

            if @dtLicenseEndDate is null
                set @dtLicenseEndDate = (
                select dateadd(dd, (select [lifetimeDays] from licenses.vLicense where ID = @oldlicenseID), createDate)
                from licenses.activation
                where ID = @oldActivationID
                )                
            --  select @dtLicenseEndDate as dtLicenseEndDate;
                
            if (@dtLicenseEndDate < @dtNow) or (@dtLicenseEndDate is null)
                set @dtLicenseEndDate = @dtNow
            --  select @dtLicenseEndDate as dtLicenseEndDate;
            
            set @dtLicenseEndDate = dateadd(dd, (select [lifetimeDays] from licenses.vLicense where ID = @licenseID), @dtLicenseEndDate)
            --  select @dtLicenseEndDate as dtLicenseEndDate;

            if (@@trancount = 0) BEGIN TRAN trnASSetActivationStatus

            --  insert activation record for new key
            --  ------------------------------------
            set @createDate = getdate();
            set @history = (select isnull(ltrim(rtrim(convert(nvarchar(30), @createDate, 121))), 'null') as [createDate]
                                 , isnull(ltrim(rtrim(@ipAddress)), 'null')                              as [ipAddress]
                            for xml raw('insertForMergeAsNewKey'), root('history')
                           );
  
            insert licenses.[activation] (licenseID, parentID, systemID, createDate, endDate, history)
            select @licenseID, @oldActivationID, @systemID, @createDate, @dtLicenseEndDate, @history
            set @activationID = SCOPE_IDENTITY();

            --  // key merging
            --  update activation record for old key: set new EndDate for old activation
            -- if Lifetime is null, then update activation records for the chain of old keys: set new EndDate for for the chain of old activations
            if @dtLicenseEndDate is not null
            begin

                set @history = (select isnull(ltrim(rtrim(convert(nvarchar(30), @createDate, 121))), 'null') as [createDate]
                                     , isnull(ltrim(rtrim(@ipAddress)), 'null')                              as [ipAddress]
                                for xml raw('updateForMergeAsOldKey')
                               );
            
				update licenses.[activation]
				set endDate = @dtLicenseEndDate, history = cast(substring(cast([history] as nvarchar(max)), 0, len(cast([history] as nvarchar(max)))-len('</history>')+1)+cast(@history as nvarchar(max))+'</history>' as xml) 
				where ID in (select ID from [licenses].[fActivationTie] (@activationID) where ID!=@activationID)
            end
            
        end
        --  --------------------------------------------------------------
        --  /MERGE
        --  --------------------------------------------------------------
        else    --  if @oldLicenseNumberID is null
        --  --------------------------------------------------------------
        --  ONE KEY
        --  --------------------------------------------------------------
        begin
            ----  get exists activation for this client
            ----set @activationID = (select ID from ActivationProcess.Activations where LicenseNumberID = @licenseNumberID and ClientId = @clientId);
            --if @activationID is null
            --begin
            set @dtLicenseEndDate = @dtNow;   
            set @dtLicenseEndDate = dateadd(dd, (select [lifetimeDays] from  licenses.vLicense where ID = @licenseID), @dtLicenseEndDate)

            
            set @createDate = getdate();
            set @history = (select isnull(ltrim(rtrim(convert(nvarchar(30), @createDate, 121))), 'null') as [createDate]
                                 , isnull(ltrim(rtrim(@ipAddress)), 'null')                              as [ipAddress]
                            for xml raw('insert'), root('history')
                           );

            if (@@trancount = 0) BEGIN TRAN trnASSetActivationStatus
                
            insert licenses.activation (licenseID, parentID, systemID, createDate, endDate, history)
            select @licenseID, @oldActivationID, @systemID, @createDate, @dtLicenseEndDate, @history
            set @activationID = SCOPE_IDENTITY();
            --end
        end

    end --  of <if @activationID is null> clause
    else    
    --  if @activationID is not null - license for this system already exists
    begin
        set @dtLicenseEndDate = (select endDate from licenses.activation where ID = @activationID);
        if @dtLicenseEndDate < @dtNow
        begin
            set @errMsg = N'50006. The license <' + ltrim(rtrim(ISNULL(@licenseKey, 'null'))) + '> has expired'
            raiserror (@errMsg , 16, 1)       
        end
    end
    
    
    if @dtLicenseEndDate is null
        set @dtLicenseEndDate = (select EndDate from licenses.activation where ID = @activationID);
    if @dtLicenseEndDate is null
        set @dtLicenseEndDate = (
            select dateadd(dd, lc.lifetimeDays, act.createDate) as LicenseEndDate
            from licenses.activation act
                join licenses.vLicense lc on act.licenseID = lc.id
            where act.ID = @activationID
            );
   
    --  set @daysToLicenseEndDate = datediff(dd, @dtToday, @dtLicenseEndDate);
    set @endDate = @dtLicenseEndDate;


    ----  update activation count
    if (@@trancount = 0) BEGIN TRAN trnASSetActivationStatus;

    set @createDate = getdate();
    if (select history from licenses.[activation] where ID = @activationID) is not null
    begin
        set @history = (select isnull(ltrim(rtrim(convert(nvarchar(30), @createDate, 121))), 'null') as [createDate]
                             , isnull(ltrim(rtrim(@ipAddress)), 'null')                              as [ipAddress]
                        for xml raw('countIncrement')
                       );
        set @history = (select cast(substring(cast([history] as nvarchar(max)), 0, len(cast([history] as nvarchar(max)))-len('</history>')+1)+cast(@history as nvarchar(max))+'</history>' as xml) from licenses.[activation] where ID = @activationID)
    end
    else
    begin
        set @history = (select isnull(ltrim(rtrim(convert(nvarchar(30), @createDate, 121))), 'null') as [createDate]
                         , isnull(ltrim(rtrim(@ipAddress)), 'null')                                  as [ipAddress]
                    for xml raw('countIncrement'), root('history')
                   );   
    end
    
    update licenses.[activation]
    set
          count = count + 1
        , modifyDate = @createDate
        -- , history = cast(substring(cast([history] as nvarchar(max)), 0, len(cast([history] as nvarchar(max)))-len('</history>')+1)+cast(@history as nvarchar(max))+'</history>' as xml) 
        -- , history = cast(substring(isnull(cast([history] as nvarchar(max)), '<history> </history>'), 0, len(isnull(cast([history] as nvarchar(max)), '<history> </history>')-len('</history>')+1)+cast(@history as nvarchar(max))+'</history>' as xml)         
        , history = @history
    where ID = @activationID


lblExit:
	
	
    if @trancount = 0 and @@trancount > 0 COMMIT TRANSACTION
    set @intResult = 0  --  routine success status

end try

begin catch

    if @trancount = 0 and @@trancount > 0 ROLLBACK TRANSACTION trnASSetActivationStatus
    select @errNum = error_number(), @errMsg = error_message();

    print @errMsg;
    exec [Log].[pError] @action = 1, @number = @errNum, @message = @errMsg
    set @intResult = case 
        when @errNum > 0 and isnumeric(left(@errMsg, 5)) = 1 then (-1)* cast(left(@errMsg, 5) as int)
        when @errNum = 0 then -1 
        else (-1)*@errNum 
        end

end catch;

                   
/*  TEST ZONE
--  select top 10 * from licenses.license order by id desc where id = 650020;
--  select top 10 * from licenses.activation where endDate < getdate();
--  select top 10 * from log.error; --  select top 10 * from log.log
    update licenses.activation set history = null 
    
begin tran

--  declare @intResult int, @daysToLicenseEndDate int;
--  select newid()

declare @intResult int, @licenseEndDate datetime, @serverActivationCount int;
exec @intResult = [activationService].[pLicense_Activate]
      @sessionUID = null

    --  main license to activate
    , @licenseKey = 'MF2YJNDQMW9V6JRQ68G23RDW9'
    
    --  client system attributes
    , @machineKey = '10CF59E1-853D-46E6-825C-77337014AA3E'
    , @motherboardKey = 'IST19'
    , @physicalMAC    = null
    , @isAutogeneratedMachineKey = 1
    -- , @oldLicenseKey = 'BXX9Q7AMB6ZY3DA9H2MT8HFUM'
    
    , @endDate = @licenseEndDate OUT
    , @serverActivationCount = @serverActivationCount OUT
  
select @intResult, @licenseEndDate as licenseEndDate, @serverActivationCount as serverActivationCount;

--  select * from licenses.activation where licenseID = 100144
--  select * from licenses.activation where licenseID = 100143
    select * from licenses.activation 

rollback tran



--  20120726 BUGFIX
begin tran

declare @intResult int, @licenseEndDate datetime;
exec @intResult = [activationService].[pLicense_Activate]
      @sessionUID = null
    --  main license to activate
    , @licenseKey = 'JPY89W22T3A4Q2HMJ4RFUWYJ6'
    
    --  client system attributes
    , @machineKey = '56FBA942-04CB-4FFA-895F-17A984D453EF'
    , @motherboardKey = 'IST19'
    , @physicalMAC    = null
    , @isAutogeneratedMachineKey = null
    
    , @endDate = @licenseEndDate OUT
  
select @intResult, @licenseEndDate as licenseEndDate;

--  select * from licenses.activation where licenseID = 100144
--  select * from licenses.activation where licenseID = 100143

--  select * from licenses.vLicense where [key] = 'JPY89W22T3A4Q2HMJ4RFUWYJ6'
--  select * from licenses.activation where licenseID = 20009

rollback tran


--  20120911 BUGFIX
  <PublicKey>BgIAAACkAABSU0ExAAQAAAEAAQATP24HBCAOsOOoJCTFVrJyiACZSM3cv/KV3gjI/FwFT85kUWcwxNoynzVEAI2GO3P6S/hXkiAH503rZVPBcg7cJPJ6cM1B4Ph/Jji4ggrLalEnISzhhfJ0MP03ylAe0aw263CuhXIVML69oFN5CWE2/biOZ6HR8IerqzHqewxmuA==</PublicKey>
- <Client>
  <MachineID>4d498ce0-846d-11e0-993f-f46d04483013</MachineID> 
  <MotherboardID>110008970002956</MotherboardID>
  <PhysicalMAC>F4:6D:04:48:30:13</PhysicalMAC>
  <IsAutogeneratedMachineKey>false</IsAutogeneratedMachineKey>
  </Client>
  <License>FSRGBZY9JFZBQNVFD5H6V2EYC</License>
  </ClientParameter>
Db. The number of available activations for this license is exceeded
  if @activationCount >= @allowedActivationCount


set xact_abort on
go
begin tran

declare @intResult int, @licenseEndDate datetime;
exec @intResult = [activationService].[pLicense_Activate]
    --   @sessionUID = null

    --  main license to activate
      @licenseKey = 'FSRGBZY9JFZBQNVFD5H6V2EYC'
    
    --  client system attributes
    , @machineKey = '4d498ce0-846d-11e0-993f-f46d04483013'
    , @motherboardKey = '110008970002956'
    , @physicalMAC    = 'F4:6D:04:48:30:13'
    , @isAutogeneratedMachineKey = false
    
    , @endDate = @licenseEndDate OUT
  
select @intResult, @licenseEndDate as licenseEndDate;

--  select * from licenses.activation where licenseID = 100144
--  select * from licenses.activation where licenseID = 100143

--  select * from licenses.vLicense where [key] = 'FSRGBZY9JFZBQNVFD5H6V2EYC'
--  select * from licenses.activation where licenseID = 20009

rollback tran
--  50003. The number of available activations for this license <FSRGBZY9JFZBQNVFD5H6V2EYC> is exceeded


*/
--http://www.devtoolshed.com/using-stored-procedures-entity-framework-scalar-return-values
-- я не рак, Entity Framework не даёт возможности получить значение с return;
select @intResult;
--

return @intResult;
END
GO
